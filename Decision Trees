library(readxl)
train_data <- read_excel("Documents/Homework 10/TravelPlan.xlsx")
View(train_data)
options(scipen=999)

train_data$College = as.factor(train_data$College)
train_data$CreditCard = as.factor(train_data$CreditCard)
train_data$TravelPlan = as.factor(train_data$TravelPlan)

library(rpart)
library(rpart.plot)
library(caret)
library(ROCR)
library(e1071)

#plot full tree (most complex)
set.seed(1)
fulltree = rpart(TravelPlan ~., data = train_data, method = "class", cp=0, minsplit=2, minbucket=1, maxsurrogate=0)
summary(fulltree)
prp(fulltree, type=1,extra=1,under=TRUE)

#The cp value tells you the complexity of tree (set at 0.01 unless specified)
printcp(fulltree)

#these are simplified and less overfitting
#the minimal error tree is the lowest value of xerror and it could be a middle tree
mintree = prune(fulltree, cp=0.00)
summary(mintree)
prp(mintree, type=1,extra=1,under=TRUE)
predict(mintree)

#probabilities for each decision
predict_prob_min = predict(mintree,type = "prob")

#predicted class by either vector or class
predict_class_min = predict(fulltree, type = "vector")
predict_class_min = predict(fulltree, type = "class")
predict_class_min

#best pruned tree is the lowest value of adding the xerror and the xstd; #see if there is a tree with classif. error < or = to minimal error tree
prunedtree = prune(fulltree, cp=0.008)
summary(prunedtree)
prp(prunedtree, type=1,extra=1,under=TRUE)
predict(prunedtree)

#probabilities for each decision
predict_prob = predict(prunedtree,type = "prob")
View(predict_prob)

#predicted class by either vector or class
predict_class = predict(prunedtree, type = "vector")
predict_class = predict(prunedtree, type = "class")
predict_class

pred=prediction(predict_prob[,2],train_data$TravelPlan,label.ordering = c("0","1"))

#Look at ROC Curve
roc=performance(pred,measure="tpr",x.measure="fpr")
plot(roc)

#diagonal line
abline(a=0,b=1)

#generate data
rocdata=data.frame(fpr=roc@x.values[[1]],tpr=roc@y.values[[1]],cutoff=roc@alpha.values[[1]])

#Look at area under curve
auc=performance(pred,measure="auc")
auc

#Plot accuracy curve
accuracy = performance(pred, measure = "acc")
plot(accuracy)

#Plot lift curve
lift = performance(pred,measure="lift",x.measure="rpp")
plot(lift)

#Look at prediction statistics to see accuracy, sensitivity, etc.
conf_mat = confusionMatrix(predict_class,train_data$TravelPlan,positive = "1")
conf_mat
1-0.955

#Add test data to see predictions for new customers
library(readxl)
test_data <- read_excel("Documents/Homework 10/TravelPlan.xlsx",
sheet = "Travel_Plan_Score")
View(test_data)

test_data$College = as.factor(test_data$College)
test_data$CreditCard = as.factor(test_data$CreditCard)

#Predictions for new customers using pruned tree
predict(prunedtree, test_data, type="class")
predict(prunedtree, test_data, type="prob")


#Predictions for new customers using min tree
predict(mintree, test_data, type="prob")
predict(mintree, test_data, type="class")
